<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:hz="http://www.hazelcast.com/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd


             http://www.hazelcast.com/schema/spring http://www.hazelcast.com/schema/spring/hazelcast-spring-3.1.xsd">

    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
    </bean>


    <bean id="baseCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean" abstract="true">
        <property name="cacheManager" ref="ehcacheManager"/>
        <property name="eternal" value="false"/>
        <property name="overflowToDisk" value="true"/>
        <property name="diskPersistent" value="false"/>
        <property name="statisticsEnabled" value="true"/>
        <property name="timeToIdle" value="0"/>
        <property name="timeToLive" value="0"/>
        <property name="memoryStoreEvictionPolicy" value="LFU"/>
    </bean>

    <bean id="userCache" parent="baseCache">
        <property name="cacheName" value="userCache"/>
        <property name="maxEntriesLocalHeap" value="1000"/>
        <property name="timeToIdle" value="3600"/>
        <property name="timeToLive" value="3600"/>
        <property name="cacheEntryFactory">
            <bean class="com.rubicon.platform.authorization.hyperion.cache.UserSelfCacheEntryFactory">
                <property name="restTemplate">
                    <bean class="org.springframework.web.client.RestTemplate">
                        <property name="requestFactory">
                            <bean class="com.rubicon.platform.authorization.service.client.revv4.RequestFactoryBuilder">
                                <property name="socketTimeout" value="${revv.timeout.request}"/>
                                <property name="connectionTimeout" value="${revv.timeout.connect}"/>
                                <property name="usePoolingClient" value="false"/>
                            </bean>
                        </property>
                        <property name="messageConverters">
                            <list>
                                <ref bean="messageConverter"/>
                            </list>
                        </property>
                    </bean>
                </property>
                <property name="requestUrl" value="${login.userMeUrl}/user/me/?access_token={accessToken}"/>
            </bean>
        </property>
    </bean>

    <bean id="roleAssignmentCache" parent="baseCache">
        <property name="cacheName" value="roleAssignmentCache"/>
        <property name="maxEntriesLocalHeap" value="10000"/>
    </bean>

    <bean id="roleAssignmentObjectCache" class="com.rubicon.platform.authorization.service.cache.RoleAssignmentObjectCache">
        <constructor-arg ref="roleAssignmentCache"/>
    </bean>

    <bean id="accountCache" parent="baseCache">
        <property name="cacheName" value="accountCache"/>
        <property name="maxEntriesLocalHeap" value="10000"/>
    </bean>

    <bean id="accountObjectCache" class="com.rubicon.platform.authorization.service.cache.AccountObjectCache">
        <constructor-arg ref="accountCache"/>
    </bean>

    <bean id="accountGroupCache" parent="baseCache">
        <property name="cacheName" value="accountGroupCache"/>
        <property name="maxEntriesLocalHeap" value="10000"/>
    </bean>

    <bean id="accountGroupObjectCache" class="com.rubicon.platform.authorization.service.cache.AccountGroupObjectCache">
        <constructor-arg ref="accountGroupCache"/>
    </bean>

    <bean id="accountFeatureCache" parent="baseCache">
        <property name="cacheName" value="accountFeatureCache"/>
        <property name="maxEntriesLocalHeap" value="10000"/>
    </bean>

    <bean id="accountFeatureObjectCache" class="com.rubicon.platform.authorization.service.cache.BaseRoleObjectCache">
        <constructor-arg ref="accountFeatureCache"/>
    </bean>

    <bean id="roleCache" parent="baseCache">
        <property name="cacheName" value="roleCache"/>
        <property name="maxEntriesLocalHeap" value="10000"/>
    </bean>

    <bean id="roleObjectCache" class="com.rubicon.platform.authorization.service.cache.BaseRoleObjectCache">
        <constructor-arg ref="roleCache"/>
    </bean>

    <bean id="disabledPermissionUserCache" parent="baseCache">
        <property name="cacheName" value="disabledPermissionUserCache"/>
        <property name="maxEntriesLocalHeap" value="1000"/>
        <property name="timeToIdle" value="300"/>
        <property name="timeToLive" value="300"/>
    </bean>

    <bean id="disableUserPermissionObjectCache"
          class="com.rubicon.platform.authorization.service.cache.DisableUserPermissionObjectCache">
        <constructor-arg ref="disabledPermissionUserCache"/>
    </bean>

    <bean id="roleAssignmentCacheLoader" class="com.rubicon.platform.authorization.service.cache.StatusObjectCacheLoader"
            init-method="init" depends-on="hyperionServiceRegistry">
        <property name="cache" ref="roleAssignmentObjectCache"/>
        <property name="serviceRegistry" ref="hyperionServiceRegistry"/>
        <property name="endpointName" value="RoleAssignment"/>
        <property name="entityClass" value="com.rubicon.platform.authorization.data.model.PersistentRoleAssignment"/>
    </bean>

    <bean id="accountCacheLoader" class="com.rubicon.platform.authorization.service.cache.AccountObjectCacheLoader"
          init-method="init" depends-on="hyperionServiceRegistry">
        <property name="cache" ref="accountObjectCache"/>
        <property name="serviceRegistry" ref="hyperionServiceRegistry"/>
        <property name="endpointName" value="Account"/>
        <property name="entityClass" value="com.rubicon.platform.authorization.data.model.PersistentAccount"/>
    </bean>

    <bean id="accountGroupCacheLoader" class="com.rubicon.platform.authorization.service.cache.StatusObjectCacheLoader"
          init-method="init" depends-on="hyperionServiceRegistry">
        <property name="cache" ref="accountGroupObjectCache"/>
        <property name="serviceRegistry" ref="hyperionServiceRegistry"/>
        <property name="endpointName" value="AccountGroup"/>
        <property name="entityClass" value="com.rubicon.platform.authorization.data.model.PersistentAccountGroup"/>
    </bean>

    <bean id="accountFeatureCacheLoader" class="com.rubicon.platform.authorization.service.cache.StatusObjectCacheLoader"
          init-method="init" depends-on="hyperionServiceRegistry">
        <property name="cache" ref="accountFeatureObjectCache"/>
        <property name="serviceRegistry" ref="hyperionServiceRegistry"/>
        <property name="endpointName" value="AccountFeature"/>
        <property name="entityClass" value="com.rubicon.platform.authorization.data.model.PersistentAccountFeature"/>
    </bean>

    <bean id="roleCacheLoader" class="com.rubicon.platform.authorization.service.cache.StatusObjectCacheLoader"
          init-method="init" depends-on="hyperionServiceRegistry">
        <property name="cache" ref="roleObjectCache"/>
        <property name="serviceRegistry" ref="hyperionServiceRegistry"/>
        <property name="endpointName" value="Role"/>
        <property name="entityClass" value="com.rubicon.platform.authorization.data.model.PersistentRole"/>
    </bean>

    <bean id="disabledUserPermissionCacheListener"
          class="com.rubicon.platform.authorization.service.cache.DisableUserPermissionCacheListener">
        <constructor-arg ref="disableUserPermissionObjectCache"/>
    </bean>

    <bean id="userEmailCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
        <property name="cacheName" value="userEmailCache"/>
        <property name="cacheManager" ref="ehcacheManager"/>
        <property name="maxEntriesLocalHeap" value="${cache.userEmail.maxEntriesLocalHeap}"/>
        <property name="timeToIdle" value="${cache.userEmail.timeToIdle}"/>
        <property name="timeToLive" value="${cache.userEmail.timeToLive}"/>
        <property name="memoryStoreEvictionPolicy" value="LFU"/>
        <property name="cacheEntryFactory">
            <bean class="com.rubicon.platform.authorization.service.cache.UserEmailCacheEntryFactory">
                <property name="idmClient" ref="idmClient"/>
            </bean>
        </property>
    </bean>

    <bean id="auth0TokenCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
        <property name="cacheName" value="auth0TokenCache"/>
        <property name="cacheManager" ref="ehcacheManager"/>
        <property name="maxEntriesLocalHeap" value="${cache.auth0token.maxEntriesLocalHeap}"/>
        <property name="timeToIdle" value="${cache.auth0token.timeToIdle}"/>
        <property name="timeToLive" value="${cache.auth0token.timeToLive}"/>
        <property name="memoryStoreEvictionPolicy" value="LFU"/>
        <property name="cacheEntryFactory">
            <bean class="com.rubicon.platform.authorization.service.cache.auth0TokenCacheEntryFactory">
                <property name="auth0Client" ref="auth0Client"/>
            </bean>
        </property>
    </bean>

    <bean id="messageParser" class="com.rubicon.platform.authorization.service.cache.cluster.MessageParser"/>

    <bean id="cacheChangeNotifier" class="com.rubicon.platform.authorization.service.cache.cluster.DistributedInvalidationBroadcaster">
        <property name="messageParser" ref="messageParser"/>
        <property name="topic" ref="invalidationTopic"/>
    </bean>

    <bean id="invalidationListener" class="com.rubicon.platform.authorization.service.cache.cluster.DistributedInvalidationListener">
        <property name="messageParser" ref="messageParser"/>
        <property name="listenerMap">
            <map>
                <entry key="RoleAssignment" value-ref="roleAssignmentCacheLoader"/>
                <entry key="Account" value-ref="accountCacheLoader"/>
                <entry key="AccountFeature" value-ref="accountFeatureCacheLoader"/>
                <entry key="Role" value-ref="roleCacheLoader"/>
                <entry key="RoleType" value-ref="noOpCacheNotificationListener"/>
                <entry key="AccountGroup" value-ref="accountGroupCacheLoader"/>
                <entry key="AccountGroupType" value-ref="noOpCacheNotificationListener"/>
                <entry key="DisableUserPermission" value-ref="disabledUserPermissionCacheListener"/>
            </map>
        </property>
    </bean>

    <bean id="cacheReloadController" class="com.rubicon.platform.authorization.service.cache.CacheReloadController">
        <property name="cacheLoaders">
            <list>
                <ref bean="accountCacheLoader"/>
                <ref bean="accountFeatureCacheLoader"/>
                <ref bean="roleCacheLoader"/>
                <ref bean="roleAssignmentCacheLoader"/>
                <ref bean="accountGroupCacheLoader"/>
            </list>
        </property>
    </bean>

    <hz:hazelcast id="hazelcast" depends-on="mbeanServer">
        <hz:config>
            <hz:group name="${cluster.group:access}" password="password"/>
            <hz:properties>
                <hz:property name="hazelcast.jmx">true</hz:property>
                <hz:property name="hazelcast.jmx.detailed">true</hz:property>
                <hz:property name="hazelcast.logging.type">slf4j</hz:property>
            </hz:properties>
            <hz:network port="${cluster.port}" port-auto-increment="true">
                <hz:join>
                    <hz:multicast enabled="false"/>
                    <hz:tcp-ip enabled="true">
                        <hz:members>${cluster.hosts}</hz:members>
                    </hz:tcp-ip>
                </hz:join>
            </hz:network>
            <hz:topic name="cache_invalidation">
                <hz:message-listeners>
                    <hz:message-listener implementation="invalidationListener"/>
                </hz:message-listeners>
            </hz:topic>
        </hz:config>
    </hz:hazelcast>
    
    <hz:topic  id="invalidationTopic" instance-ref="hazelcast" name="cache_invalidation" depends-on="hazelcast"/>
    <hz:lock id="accountSyncJobLock" instance-ref="hazelcast" depends-on="hazelcast" name="accountSyncJobLock"/>
    <hz:map id="jobMap" instance-ref="hazelcast" name="jobMap" depends-on="hazelcast"/>
</beans>
