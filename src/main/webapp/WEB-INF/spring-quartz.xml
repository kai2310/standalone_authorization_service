<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

        <bean id="quartzScheduler"
              class="org.springframework.scheduling.quartz.SchedulerFactoryBean" depends-on="mbeanServer">
            <property name="quartzProperties">
                <props>
                    <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                    <prop key="org.quartz.threadPool.threadCount">1</prop>
                    <prop key="org.quartz.threadPool.threadPriority">5</prop>
                    <prop key="org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread">true</prop>
                    <prop key="org.quartz.scheduler.rmi.export">false</prop>
                    <prop key="org.quartz.scheduler.rmi.proxy">false</prop>
                    <prop key="org.quartz.scheduler.jmx.export">true</prop>
                </props>
            </property>
            <property name="autoStartup" value="${scheduler.start}" />
            <property name="jobFactory">
                <bean class="org.springframework.scheduling.quartz.SpringBeanJobFactory"/>
            </property>
            <property name="triggers">
                <list>
                    <bean class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
                        <property name="jobDetail" ref="accountSyncJobDetail"/>
                        <property name="startDelay" value="${account.sync.startDelay:30000}"/>
                        <property name="cronExpression" value="${account.sync.schedule:0 0/1 * * * ?}" />
                    </bean>
                    <bean class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
                        <property name="jobDetail" ref="cacheRefreshJobDetail"/>
                        <property name="startDelay" value="${cache.reload.startDelay:30000}"/>
                        <property name="cronExpression" value="${cache.reload.schedule:0 0/1 * * * ?}" />
                    </bean>
                </list>
            </property>
        </bean>


    <bean id="accountSyncJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="name" value="accountSyncJob"/>
        <property name="targetObject" ref="accountSyncJob" />
        <property name="targetMethod" value="run" />
    </bean>

    <bean id="cacheRefreshJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="name" value="cacheReloadJob"/>
        <property name="targetObject" ref="cacheReloadJob" />
        <property name="targetMethod" value="run" />
    </bean>

    <bean id="accountSyncJob"  class="com.rubicon.platform.authorization.service.jobs.AccountSyncJob">
        <property name="jobKey" value="SynchJob"/>
        <property name="jobLock" ref="accountSyncJobLock"/>
        <property name="sharedMap" ref="jobMap"/>
        <property name="jobStatus" ref="syncJobStatus"/>
        <property name="enabled" value="${account.sync.enabled}"/>
        <property name="workers">
            <list>
                <ref bean="publisherSyncJob"/>
                <ref bean="marketplaceVendorSyncJob"/>
            </list>
        </property>
    </bean>
    <bean id="syncJobStatus" class="com.rubicon.platform.authorization.service.jobs.JobStatus"/>

    <bean id="publisherSyncJob"  class="com.rubicon.platform.authorization.service.jobs.SyncWorker">
        <property name="accountUpdateWorker" ref="accountUpdateWorker"/>
        <property name="configurationManager" ref="configurationManager"/>
        <property name="retriever" ref="publisherRetriever"/>
        <property name="jobDataKey" value="lastPublisherUpdate"/>
        <property name="initialStatusFilter" value="active,pending"/>
        <property name="updateStatusFilter" value="active,pending,deleted"/>
        <property name="accountType" value="publisher"/>
        <property name="jobStatus" ref="publisherSyncJobStatus"/>
    </bean>
    <bean id="publisherSyncJobStatus" class="com.rubicon.platform.authorization.service.jobs.SyncJobStatus">
        <property name="enabled" value="${syncJobWorker.publisher.enabled}"/>
    </bean>

    <bean id="publisherRetriever" class="com.rubicon.platform.authorization.service.jobs.PublisherRetriever">
        <property name="metricUtils" ref="metricUtils"/>
        <property name="restTemplate" ref="restTemplate"/>
        <property name="baseUrl" value="${publisherManagement.url}/data/v1/publisher"/>
        <property name="responseType" value="com.rubicon.platform.authorization.service.jobs.RevvAccountResponse"/>
        <property name="properties" value="id,name,status"/>
        <property name="accountType" value="publisher"/>
    </bean>

    <bean id="marketplaceVendorSyncJob" class="com.rubicon.platform.authorization.service.jobs.SyncWorker">
        <property name="accountUpdateWorker" ref="accountUpdateWorker"/>
        <property name="configurationManager" ref="configurationManager"/>
        <property name="retriever" ref="marketplaceVendorRetriever"/>
        <property name="jobDataKey" value="lastMarketplaceVendorUpdate"/>
        <property name="initialStatusFilter" value="active,inactive"/>
        <property name="updateStatusFilter" value="active,inactive,deleted"/>
        <property name="accountType" value="mp-vendor"/>
        <property name="jobStatus" ref="marketplaceVendorSyncJobStatus"/>
    </bean>
    <bean id="marketplaceVendorSyncJobStatus" class="com.rubicon.platform.authorization.service.jobs.SyncJobStatus">
        <property name="enabled" value="${syncJobWorker.vendorMarketplace.enabled}"/>
    </bean>


    <bean id="marketplaceVendorRetriever"
          class="com.rubicon.platform.authorization.service.jobs.DataMarketplaceVendorRetriever">
        <property name="metricUtils" ref="metricUtils"/>
        <property name="restTemplate" ref="restTemplate"/>
        <property name="baseUrl" value="${marketplaceData.url}/data/v1/marketplace-vendors"/>
        <property name="responseType"
                  value="com.rubicon.platform.authorization.service.jobs.RevvAccountResponse"/>
        <property name="accountType" value="mp-vendor"/>
    </bean>


    <bean id="accountUpdateWorker" class="com.rubicon.platform.authorization.service.jobs.AccountUpdateWorker">
        <property name="accountLoader" ref="accountLoader"/>
        <property name="publisherAutoAddFeatureIds" value="#{'${publisher.autoAdd.featureIds}'.split(',')}"/>
    </bean>


    <!-- Detect when the DB gets refreshed. Should only be enabled in Dev/QA, not in Prod -->
    <bean id="cacheReloadJob" class="com.rubicon.platform.authorization.service.jobs.CacheReloadJob">
        <property name="cacheReloadController" ref="cacheReloadController"/>
        <property name="enabled" value="${cache.reload.enabled}"/>
        <property name="jobStatus" ref="cacheReloadJobStatus"/>
        <property name="tableName" value="${cache.reload.table}"/>
        <property name="valueColumnName" value="${cache.reload.valueColumn}"/>
        <property name="key" value="${cache.reload.key}"/>
        <property name="jdbcTemplate">
            <bean class="org.springframework.jdbc.core.JdbcTemplate">
                <property name="dataSource" ref="dataSource"/>
            </bean>
        </property>
    </bean>
    <bean id="cacheReloadJobStatus" class="com.rubicon.platform.authorization.service.jobs.CacheReloadJobStatus"/>

    <bean id="auth" class="com.rubicon.platform.authorization.service.client.revv4.OAuth2AuthenticationClient">
        <constructor-arg index="0" value="${oauth.tokenUrl}"/>
        <constructor-arg index="1" value="${oauth.clientId}"/>
        <constructor-arg index="2" value="${oauth.clientSecret}"/>
        <constructor-arg index="3" value="${oauth.timeout.request}"/>
        <constructor-arg index="4" value="${oauth.timeout.connect}"/>
    </bean>

    <bean id="requestFactory" class="com.rubicon.platform.authorization.service.client.revv4.RequestFactoryBuilder">
        <property name="socketTimeout" value="${revv.timeout.request}"/>
        <property name="connectionTimeout"  value="${revv.timeout.connect}"/>
        <property name="concurrentRequestLimit" value="${revv.concurrentLimit}"/>
    </bean>
    <bean id="messageConverter" class="com.rubicon.platform.authorization.service.client.revv4.MessageConverterBuilder"/>
    <bean id="restTemplate" class="com.rubicon.platform.authorization.service.client.revv4.OAuthRestTemplate">
        <constructor-arg ref="auth"/>
        <property name="requestFactory" ref="requestFactory"/>
        <property name="messageConverters">
            <list>
                <ref bean="messageConverter"/>
            </list>
        </property>
    </bean>
</beans>
